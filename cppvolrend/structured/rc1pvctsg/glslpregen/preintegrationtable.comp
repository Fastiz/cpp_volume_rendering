#version 430

uniform sampler3D TexSuperVoxelVolume;

uniform vec3 VolumeDimensionsBase;
uniform vec3 VolumeDimensionsLevel;

uniform float MipMapLevel;
uniform int PositionMultiplier;

// size of each work group
layout (local_size_x = 8, local_size_y = 8, local_size_z = 8) in;
layout (r16f, binding = 1) uniform image3D TexSuperVoxelLevel;

void main ()
{
  ivec3 storePos = ivec3(gl_GlobalInvocationID.xyz);
  
  // if storePos is out of the current volume being computed
  if (storePos.x > VolumeDimensionsLevel.x - 1
   || storePos.y > VolumeDimensionsLevel.y - 1
   || storePos.z > VolumeDimensionsLevel.z - 1)
    return;
  
  float x = storePos.x * PositionMultiplier;
  float y = storePos.y * PositionMultiplier;
  float z = storePos.z * PositionMultiplier;
  float n_samples = PositionMultiplier * PositionMultiplier * PositionMultiplier;

  float averag = 0.0;
  float stddev = 0.0;

  {
    int ptx = 0;
    while (ptx < PositionMultiplier)
    {
      int pty = 0;
      while (pty < PositionMultiplier)
      {
        int ptz = 0;
        while (ptz < PositionMultiplier)
        {
          float density = texelFetch(TexSuperVoxelVolume, ivec3(x + ptx, y + pty, z + ptz), 0).r;
          averag = averag + (density / n_samples);

          ptz = ptz + 1;
        }
        pty = pty + 1;
      }
      ptx = ptx + 1;
    }
  }

  {
    int ptx = 0;
    while (ptx < PositionMultiplier)
    {
      int pty = 0;
      while (pty < PositionMultiplier)
      {
        int ptz = 0;
        while (ptz < PositionMultiplier)
        {
          float density = texelFetch(TexSuperVoxelVolume, ivec3(x + ptx, y + pty, z + ptz), 0).r;
          float dev = (density - averag);

          stddev = stddev + ((dev*dev) / n_samples);

          ptz = ptz + 1;
        }
        pty = pty + 1;
      }
      ptx = ptx + 1;
    }
  }

  imageStore(TexSuperVoxelLevel, storePos, vec4(averag, stddev, 0.0, 0.0));
}