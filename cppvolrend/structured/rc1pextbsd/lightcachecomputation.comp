#version 430

//#define CONE_DEFAULT_POSITION
//#define CONE_ROUND_POSITION
#define CONE_RESCALE_CEIL_INTERVAL

//#define CONE_P1_OFFSET

#define CUT_WHEN_AWAY_FROM_VOLUME

const float mPI = 3.1415926;

uniform vec3 LightCacheDimensions;

// scalar volume scaled from [0,1]
layout (binding = 1) uniform sampler3D TexVolume;
layout (binding = 2) uniform sampler1D TexTransferFunc;  
layout (binding = 3) uniform sampler3D TexVolumeSAT3D;

uniform vec3 VolumeDimensions;
uniform vec3 VolumeScales;
uniform vec3 VolumeScaledSizes;

// Ambient Occlusion Parameters
uniform int AmbOccShells;
uniform float AmbOccRadius;

// Directional Shadow Parameters
uniform int DirSdwConeSamples;
uniform float DirSdwConeAngle;
uniform float DirSdwSampleInterval;
uniform float DirSdwInitialStep;
uniform float DirSdwUserInterfaceWeight;
uniform float DirSdwConeMaxDistance;

uniform vec3 LightCamForward;
uniform int TypeOfShadow;

uniform vec3 WorldEyePos;
uniform vec3 WorldLightingPos;

uniform int ApplyOcclusion;
uniform int ApplyShadow;

// size of each work group
layout (local_size_x = 8, local_size_y = 8, local_size_z = 8) in;
layout (rg16f, binding = 0) uniform image3D TexLightCache;

// we added a border to handle with boundary errors
// . SAT Size = VolumeDimensions * VolumeScales + 2 * VolumeScales
const vec3 MinSATPosition = VolumeScales * 0.5;
const vec3 MaxSATPosition = VolumeScaledSizes + VolumeScales * 1.5;

const vec3 MinVolPosition = VolumeScales * 0.5;
const vec3 MaxVolPosition = VolumeScaledSizes - VolumeScales * 0.5;

vec3 inv_vol_scaled = 1.0f / (VolumeScaledSizes + VolumeScales * 2.0);
float GetSummed3Density (float x, float y, float z)
{
  return texture(TexVolumeSAT3D, vec3(x, y, z) * inv_vol_scaled).r;
}

// Function to evaluate a 3D SAT Sum from p1 to p2.
// . To better numerical control, we might maintain the distance multiple of VolumeScales.
float EvaluateSAT3D (vec3 p1, vec3 p2)
{
  float V1 = GetSummed3Density(p2.x, p2.y, p2.z);
  float V2 = GetSummed3Density(p1.x, p2.y, p2.z);
  float V3 = GetSummed3Density(p2.x, p2.y, p1.z);
  float V4 = GetSummed3Density(p1.x, p2.y, p1.z);
                                                    
  float V5 = GetSummed3Density(p2.x, p1.y, p2.z);
  float V6 = GetSummed3Density(p1.x, p1.y, p2.z);
  float V7 = GetSummed3Density(p2.x, p1.y, p1.z);
  float V8 = GetSummed3Density(p1.x, p1.y, p1.z);

  return (V1 - V2 - V3 + V4 - V5 + V6 + V7 - V8);
}

float EvaluateAmbientOcclusionSAT3D (vec3 p1, vec3 p2)
{
  // offset based on the added border
  p1 = clamp(p1 + VolumeScales, MinSATPosition, MaxSATPosition);
  p2 = clamp(p2 + VolumeScales, MinSATPosition, MaxSATPosition);

  // return the aggregated result
  return EvaluateSAT3D(p1, p2);
}

float ExtinctionAmbientOcclusion (vec3 tx_pos)
{
  // Evaluate Sh0
  float SAT_Sh0 = EvaluateAmbientOcclusionSAT3D(tx_pos - AmbOccRadius * VolumeScales,
                                                tx_pos + AmbOccRadius * VolumeScales);

  float rsh0 = AmbOccRadius;
  float tSh0 = SAT_Sh0 * (1.0 / (rsh0 * rsh0));

  // Evaluate Shi
  float SAT_Shi = SAT_Sh0;
  float tshi = tSh0;

  int ith_shell = 1;
  while (ith_shell < AmbOccShells)
  {
    float rshi_1 = AmbOccRadius * float(ith_shell + 1);
  
    float SAT_Shi_1 = EvaluateAmbientOcclusionSAT3D(tx_pos - rshi_1 * VolumeScales,
                                                    tx_pos + rshi_1 * VolumeScales);
    
    float tshi_1 = tshi + (SAT_Shi_1 - SAT_Shi) * (1.0 / (rshi_1 * rshi_1));
    
    SAT_Shi = SAT_Shi_1;
    tshi = tshi_1;

    ith_shell = ith_shell + 1;
  }

  float rshi = AmbOccRadius * float(AmbOccShells);

  float W_A = 1.0 / (rshi * rshi);
  float Stau = W_A * tshi;
  return exp(-Stau);
}

float EvaluateShadowSAT3D (vec3 p1, vec3 p2)
{
  // Compute the query size
  // . We will clamp the texture position, but we must first ensure 
  //   we have the correct query size.
  float volquery = ((abs(p1.x - p2.x) / VolumeScales.x)) 
                 * ((abs(p1.y - p2.y) / VolumeScales.y))
                 * ((abs(p1.z - p2.z) / VolumeScales.z));
              
#ifdef CONE_ROUND_POSITION
  if (volquery < 1.0f) return 0.0f;
#endif 

  // Offset the current texture to stay correctly positioned into the SAT with 1-border
  p1 = clamp(p1 + VolumeScales, MinSATPosition, MaxSATPosition);
  p2 = clamp(p2 + VolumeScales, MinSATPosition, MaxSATPosition);

  // return the normalized result
  return (EvaluateSAT3D(p1, p2) / volquery) * DirSdwUserInterfaceWeight;
}

float ConeZAxis (vec3 pos, vec3 cone_vec)
{
  float Stau = 0.0;
  
   // Check the direction of the axis (positive or negative)
  float signal = 1.0;
  if (cone_vec.z < 0) signal = -1.0;

  // Projected vectors into secondary planes [YZ, XZ]
  vec3 proj_y = normalize(vec3(0.0, cone_vec.y, cone_vec.z));
  vec3 proj_x = normalize(vec3(cone_vec.x, 0.0, cone_vec.z));

  float radius_angle = DirSdwConeAngle;

  // cos and sin of cone aperture angle
  float p_cs = cos(radius_angle);
  float p_sn = sin(radius_angle);

  float n_cs = cos(-radius_angle);
  float n_sn = sin(-radius_angle);

  // projected vectors
  vec3 pj_x1 = normalize(vec3(proj_x.x * n_cs - proj_x.z * n_sn, 0.0, proj_x.x * n_sn + proj_x.z * n_cs));
  vec3 pj_x2 = normalize(vec3(proj_x.x * p_cs - proj_x.z * p_sn, 0.0, proj_x.x * p_sn + proj_x.z * p_cs));

  vec3 pj_y1 = normalize(vec3(0.0, proj_y.y * n_cs - proj_y.z * n_sn, proj_y.y * n_sn + proj_y.z * n_cs));
  vec3 pj_y2 = normalize(vec3(0.0, proj_y.y * p_cs - proj_y.z * p_sn, proj_y.y * p_sn + proj_y.z * p_cs));

  // step for each cone sample = number of voxels to step * signal * voxel scale
  float sample_interval = DirSdwSampleInterval * signal * VolumeScales.z;
  // number of voxels to step * signal * voxel scale
  float z_pos = DirSdwInitialStep * signal * VolumeScales.z;

  while ((z_pos / cone_vec.z) < DirSdwConeMaxDistance
#ifdef CUT_WHEN_AWAY_FROM_VOLUME
    && (pos.z + (z_pos + sample_interval) > MinVolPosition.z && 
        pos.z + (z_pos + sample_interval) < MaxVolPosition.z)
#endif
  )
  {
    float z_mean = abs(z_pos + sample_interval * 0.5);

    float p_x1 = pj_x1.x * (z_mean / abs(pj_x1.z));
    float p_x2 = pj_x2.x * (z_mean / abs(pj_x2.z));

    float p_y1 = pj_y1.y * (z_mean / abs(pj_y1.z));
    float p_y2 = pj_y2.y * (z_mean / abs(pj_y2.z));

    float x1 = min(p_x1, p_x2); float x2 = max(p_x1, p_x2);
    float y1 = min(p_y1, p_y2); float y2 = max(p_y1, p_y2);
  
#ifndef CONE_DEFAULT_POSITION
  // Get the current diferences on each secondary axis
  float xdiff = abs(x2 - x1);
  float ydiff = abs(y2 - y1);
  
  float xs, ys;
  #ifdef CONE_ROUND_POSITION
    // Get the interval, and compute the round, to ensure an integer number of voxels. Then we might
    //   correct the position in the interval. We half this interval to be resized for each direction.
    xs = (round(xdiff / VolumeScales.x) - (xdiff / VolumeScales.x)) * 0.5;
    ys = (round(ydiff / VolumeScales.y) - (ydiff / VolumeScales.y)) * 0.5;
  #endif

  #ifdef CONE_RESCALE_CEIL_INTERVAL
    // Get the interval, compute the ceil, than subtract by the current interval 
    //   that we have before. Then, we will know how much we need to add on each
    //   direction.
    xs = (ceil(xdiff / VolumeScales.x) - (xdiff / VolumeScales.x)) * 0.5;
    ys = (ceil(ydiff / VolumeScales.y) - (ydiff / VolumeScales.y)) * 0.5;
  #endif

  // add the differences on each direction
  x1 = x1 - xs * VolumeScales.x;  x2 = x2 + xs * VolumeScales.x; 
  y1 = y1 - ys * VolumeScales.y;  y2 = y2 + ys * VolumeScales.y;
#endif

    float z1 = min(z_pos, z_pos + sample_interval);
    float z2 = max(z_pos, z_pos + sample_interval);

    vec3 p1 = vec3(x1, y1, z1);
    vec3 p2 = vec3(x2, y2, z2);

    Stau += EvaluateShadowSAT3D(pos + p1, pos + p2);

    z_pos = z_pos + sample_interval;
  }

  return Stau;
}

float ConeYAxis (vec3 pos, vec3 cone_vec)
{
  float Stau = 0.0;
  
  // Check the direction of the axis (positive or negative)
  float signal = 1.0;
  if (cone_vec.y < 0) signal = -1.0;

  // Projected vectors into secondary planes [XY, ZY]
  vec3 proj_x = normalize(vec3(cone_vec.x, cone_vec.y, 0.0));
  vec3 proj_z = normalize(vec3(0.0, cone_vec.y, cone_vec.z));

  float radius_angle = DirSdwConeAngle;

  // cos and sin of cone aperture angle
  float p_cs = cos(radius_angle);
  float p_sn = sin(radius_angle);

  float n_cs = cos(-radius_angle);
  float n_sn = sin(-radius_angle);

  // projected vectors
  vec3 pj_x1 = normalize(vec3(proj_x.x * n_cs - proj_x.y * n_sn, proj_x.x * n_sn + proj_x.y * n_cs, 0.0));
  vec3 pj_x2 = normalize(vec3(proj_x.x * p_cs - proj_x.y * p_sn, proj_x.x * p_sn + proj_x.y * p_cs, 0.0));

  vec3 pj_z1 = normalize(vec3(0.0, proj_z.z * n_sn + proj_z.y * n_cs, proj_z.z * n_cs - proj_z.y * n_sn));
  vec3 pj_z2 = normalize(vec3(0.0, proj_z.z * p_sn + proj_z.y * p_cs, proj_z.z * p_cs - proj_z.y * p_sn));

  // step for each cone sample = number of voxels to step * signal * voxel scale
  float sample_interval = DirSdwSampleInterval * signal * VolumeScales.y;
  // number of voxels to step * signal * voxel scale
  float y_pos = DirSdwInitialStep * signal * VolumeScales.y;

  while ((y_pos / cone_vec.y) < DirSdwConeMaxDistance
#ifdef CUT_WHEN_AWAY_FROM_VOLUME
    && (pos.y + (y_pos + sample_interval) > MinVolPosition.y &&
        pos.y + (y_pos + sample_interval) < MaxVolPosition.y)
#endif
  )
  {
    float y_mean = abs(y_pos + sample_interval * 0.5);

    float p_x1 = pj_x1.x * (y_mean / abs(pj_x1.y));
    float p_x2 = pj_x2.x * (y_mean / abs(pj_x2.y));

    float p_z1 = pj_z1.z * (y_mean / abs(pj_z1.y));
    float p_z2 = pj_z2.z * (y_mean / abs(pj_z2.y));

    float x1 = min(p_x1, p_x2); float x2 = max(p_x1, p_x2);
    float z1 = min(p_z1, p_z2); float z2 = max(p_z1, p_z2);

#ifndef CONE_DEFAULT_POSITION
    // Get the current diferences on each secondary axis
    float xdiff = abs(x2 - x1);
    float zdiff = abs(z2 - z1);
    
    float xs, zs;
  #ifdef CONE_ROUND_POSITION
    // Get the interval, and compute the round, to ensure an integer number of voxels. Then we might
    //   correct the position in the interval. We half this interval to be resized for each direction.
    xs = (round(xdiff / VolumeScales.x) - (xdiff / VolumeScales.x)) * 0.5;
    zs = (round(zdiff / VolumeScales.z) - (zdiff / VolumeScales.z)) * 0.5;
  #endif

  #ifdef CONE_RESCALE_CEIL_INTERVAL
    // Get the interval, compute the ceil, than subtract by the current interval that 
    //   we have before. Then, we will know how much we need to add on each direction.
    xs = (ceil(xdiff / VolumeScales.x) - (xdiff / VolumeScales.x)) * 0.5;
    zs = (ceil(zdiff / VolumeScales.z) - (zdiff / VolumeScales.z)) * 0.5;
  #endif

    // add the differences on each direction
    x1 = x1 - xs * VolumeScales.x;  x2 = x2 + xs * VolumeScales.x; 
    z1 = z1 - zs * VolumeScales.z;  z2 = z2 + zs * VolumeScales.z; 
#endif

    float y1 = min(y_pos, y_pos + sample_interval);
    float y2 = max(y_pos, y_pos + sample_interval);

    vec3 p1 = vec3(x1, y1, z1);
    vec3 p2 = vec3(x2, y2, z2);
    
    Stau += EvaluateShadowSAT3D(pos + p1, pos + p2);

    y_pos = y_pos + sample_interval;
  }

  return Stau;
}

float ConeXAxis (vec3 pos, vec3 cone_vec)
{
  float Stau = 0.0;
  
  // Check the direction of the axis (positive or negative)
  float signal = 1.0;
  if (cone_vec.x < 0) signal = -1.0;

  // Projected vectors into secondary planes [YX, ZX]
  vec3 proj_y = normalize(vec3(cone_vec.x, cone_vec.y, 0.0));
  vec3 proj_z = normalize(vec3(cone_vec.x, 0.0, cone_vec.z));

  float radius_angle = DirSdwConeAngle;

  // cos and sin of cone aperture angle
  float p_cs = cos(radius_angle);
  float p_sn = sin(radius_angle);

  float n_cs = cos(-radius_angle);
  float n_sn = sin(-radius_angle);

  // projected vectors
  vec3 pj_y1 = normalize(vec3(proj_y.y * n_sn + proj_y.x * n_cs, proj_y.y * n_cs - proj_y.x * n_sn, 0.0));
  vec3 pj_y2 = normalize(vec3(proj_y.y * p_sn + proj_y.x * p_cs, proj_y.y * p_cs - proj_y.x * p_sn, 0.0));

  vec3 pj_z1 = normalize(vec3(proj_z.z * n_sn + proj_z.x * n_cs, 0.0, proj_z.z * n_cs - proj_z.x * n_sn));
  vec3 pj_z2 = normalize(vec3(proj_z.z * p_sn + proj_z.x * p_cs, 0.0, proj_z.z * p_cs - proj_z.x * p_sn));

  // step for each cone sample = number of voxels to step * signal * voxel scale
  float sample_interval = DirSdwSampleInterval * signal * VolumeScales.x;
  // number of voxels to step * signal * voxel scale
  float x_pos = DirSdwInitialStep * signal * VolumeScales.x;
  
  while ((x_pos / cone_vec.x) < DirSdwConeMaxDistance
#ifdef CUT_WHEN_AWAY_FROM_VOLUME
    && (pos.x + (x_pos + sample_interval) > MinVolPosition.x &&
        pos.x + (x_pos + sample_interval) < MaxVolPosition.x )
#endif
  )
  {
    float x_mean = abs(x_pos + sample_interval * 0.5);

    float p_y1 = pj_y1.y * (x_mean / abs(pj_y1.x));
    float p_y2 = pj_y2.y * (x_mean / abs(pj_y2.x));

    float p_z1 = pj_z1.z * (x_mean / abs(pj_z1.x));
    float p_z2 = pj_z2.z * (x_mean / abs(pj_z2.x));

    float y1 = min(p_y1, p_y2); float y2 = max(p_y1, p_y2);
    float z1 = min(p_z1, p_z2); float z2 = max(p_z1, p_z2);

#ifndef CONE_DEFAULT_POSITION
    // Get the current diferences on each secondary axis
    float ydiff = abs(y2 - y1);
    float zdiff = abs(z2 - z1);
  
    float ys, zs;
  #ifdef CONE_ROUND_POSITION
    // Get the interval, and compute the round, to ensure an integer number of voxels. Then we might
    //   correct the position in the interval. We half this interval to be resized for each direction.
    ys = (round(ydiff / VolumeScales.y) - (ydiff / VolumeScales.y)) * 0.5;
    zs = (round(zdiff / VolumeScales.z) - (zdiff / VolumeScales.z)) * 0.5;
  #endif

  #ifdef CONE_RESCALE_CEIL_INTERVAL
    // Get the interval, compute the ceil, than subtract by the current interval that 
    //   we have before. Then, we will know how much we need to add on each direction.
    ys = (ceil(ydiff / VolumeScales.y) - (ydiff / VolumeScales.y)) * 0.5;
    zs = (ceil(zdiff / VolumeScales.z) - (zdiff / VolumeScales.z)) * 0.5;
  #endif

    // add the differences on each direction
    y1 = y1 - ys * VolumeScales.y;  y2 = y2 + ys * VolumeScales.y; 
    z1 = z1 - zs * VolumeScales.z;  z2 = z2 + zs * VolumeScales.z; 
#endif

    float x1 = min(x_pos, x_pos + sample_interval);
    float x2 = max(x_pos, x_pos + sample_interval);

    vec3 p1 = vec3(x1, y1, z1);
    vec3 p2 = vec3(x2, y2, z2);

    Stau += EvaluateShadowSAT3D(pos + p1, pos + p2);

    x_pos = x_pos + sample_interval;
  }

  return Stau;
}

float ExtinctionDirectionalShadows (vec3 pos, vec3 realpos)
{
  vec3 cone_vec;
  if (TypeOfShadow == 0)
    cone_vec = normalize(WorldLightingPos - realpos); 
  else if (TypeOfShadow == 1)
    cone_vec = normalize(LightCamForward);

  vec3 abscvec = abs(cone_vec);
  
  float Stau = 0.0;
  // Z AXIS
  if (abscvec.z > abscvec.x && abscvec.z > abscvec.y)
    Stau = ConeZAxis(pos, cone_vec);
  // Y AXIS
  else if (abscvec.y > abscvec.x)
    Stau = ConeYAxis(pos, cone_vec);
  // X AXIS
  else
    Stau = ConeXAxis(pos, cone_vec);

  // W_L = 1.0 / V_q;
  return exp(-Stau);
}

void main ()
{
  ivec3 storePos = ivec3(gl_GlobalInvocationID.xyz);
  
  // if storePos is out of the current volume being computed
  if (storePos.x > LightCacheDimensions.x - 1 
   || storePos.y > LightCacheDimensions.y - 1
   || storePos.z > LightCacheDimensions.z - 1)
    return;

  // Evaluate the current texture position inside the volume
  vec3 tex_pos = (vec3(storePos) + 0.5) * (VolumeScales * (VolumeDimensions / LightCacheDimensions));
  vec3 realpos = tex_pos - (VolumeScaledSizes * 0.5);

  float Iao = 1.0;
  float Ids = 1.0;

  // Evaluate Occlusion
  if (ApplyOcclusion == 1)
    Iao = ExtinctionAmbientOcclusion(tex_pos);
  
  // Evaluate Shadows
  if (ApplyShadow == 1)
    Ids = ExtinctionDirectionalShadows(tex_pos, realpos);

  imageStore(TexLightCache, storePos, vec4(Iao, Ids, 0.0, 0.0));
}