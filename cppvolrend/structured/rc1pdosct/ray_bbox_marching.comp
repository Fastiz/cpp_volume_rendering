#version 430

#define CONSIDER_BORDERS
//#define USE_EARLY_TERMINATION
//#define ALWAYS_SPLIT_CONES

//#define USE_FALLOFF_FUNCTION

#ifdef USE_EARLY_TERMINATION
const float max_ext = log(1.0 / 0.05);
#endif

layout (binding = 1) uniform sampler3D TexVolume; 
layout (binding = 2) uniform sampler1D TexTransferFunc;
layout (binding = 3) uniform sampler3D TexVolumeGradient;

uniform vec3 VolumeScaledSizes;

// Extinction Coefficient Volume
layout (binding = 4) uniform sampler3D TexVolumeOfGaussians;

// Occlusion Parameters
layout (binding = 5) uniform sampler1D TexOccConeSectionsInfo;
uniform float OccInitialStep;
uniform float OccRay7AdjWeight;
uniform vec3 OccConeRayAxes[10];
uniform int OccConeIntegrationSamples[3];
uniform float OccUIWeight;

// Shadow Parameters
layout (binding = 6) uniform sampler1D TexSdwConeSectionsInfo;
uniform float SdwInitialStep;
uniform float SdwRay7AdjWeight;
uniform vec3 SdwConeRayAxes[10];
uniform int SdwConeIntegrationSamples[3];
uniform float SdwUIWeight;

uniform float SpotLightMaxAngle;
uniform int TypeOfShadow;

uniform vec3 LightCamForward;
uniform vec3 LightCamUp;
uniform vec3 LightCamRight;
////////////////////////////////////////////////

uniform vec3 CameraEye;

uniform mat4 ViewMatrix;
uniform mat4 ProjectionMatrix;

uniform float fov_y_tangent;
uniform float aspect_ratio;

uniform int ApplyOcclusion;
uniform int ApplyShadow;
uniform int Shade;

uniform float StepSize;

uniform vec3 VolumeScales;

uniform int ApplyPhongShading;

uniform float Kambient;
uniform float Kdiffuse;
uniform float Kspecular;
uniform float Nshininess;

uniform vec3 Ispecular;

uniform vec3 WorldEyePos;
uniform vec3 WorldLightingPos;

float falloffunction (float d)
{
  float  lmb = 0.00f;

  float p0 = 1.0f;
  float p1 = d / 512.0f;
  float p2 = 1.0f - exp(-d / 512.0f);
  float p3 = sqrt(d / 512.0f);
  return 2.04f * p3;
}


// size of each work group
layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;
layout (rgba16f, binding = 0) uniform image2D OutputFrag;

///////////////////////////////////////////////////////////
// Extinction Coefficient Volume
float GetGaussianExtinction (vec3 tex_pos, float mipmaplevel)
{  
  float rg = textureLod(TexVolumeOfGaussians, tex_pos / VolumeScaledSizes, mipmaplevel).r;

  if (tex_pos.x < 0.0 || tex_pos.x > VolumeScaledSizes.x 
   || tex_pos.y < 0.0 || tex_pos.y > VolumeScaledSizes.y
   || tex_pos.z < 0.0 || tex_pos.z > VolumeScaledSizes.z)
  {
#ifndef CONSIDER_BORDERS
    return 0.0;
#else
    float sg = pow(2.0, mipmaplevel);
    vec3 c = clamp(tex_pos, vec3(0.0), VolumeScaledSizes) - tex_pos;
    
    float dist = c.x*c.x + c.y*c.y + c.z*c.z;
    rg = rg * exp(-(dist) / (2.0 * sg * sg));
#endif
  }

  return rg;
}

///////////////////////////////////////////////////////////
// Occlusion
float occ_rays[7];
float last_amptau[7];

vec4 GetOcclusionSectionInfo (int id)
{
  return texelFetch(TexOccConeSectionsInfo, id, 0).rgba;
}

float Cone7RayOcclusion (vec3 pos_from_zero, float track_distance, vec3 k, vec3 u, vec3 v)
{
  // transform 3 to 7
  occ_rays[6] = occ_rays[5] = occ_rays[2];
  occ_rays[4] = occ_rays[3] = occ_rays[1];
  float avg = (occ_rays[2] + occ_rays[1] + occ_rays[0]) / 3.0;
  occ_rays[2] = occ_rays[1] = occ_rays[0];
  occ_rays[0] = avg;

  last_amptau[6] = last_amptau[5] = last_amptau[2];
  last_amptau[4] = last_amptau[3] = last_amptau[1];
  float avgt = (last_amptau[2] + last_amptau[1] + last_amptau[0]) / 3.0;
  last_amptau[2] = last_amptau[1] = last_amptau[0];
  last_amptau[0] = avgt;

  vec3 vk[7] =  { k * OccConeRayAxes[3].z + u * OccConeRayAxes[3].y + v * OccConeRayAxes[3].x,
                  k * OccConeRayAxes[4].z + u * OccConeRayAxes[4].y + v * OccConeRayAxes[4].x,
                  k * OccConeRayAxes[5].z + u * OccConeRayAxes[5].y + v * OccConeRayAxes[5].x,
                  k * OccConeRayAxes[6].z + u * OccConeRayAxes[6].y + v * OccConeRayAxes[6].x,
                  k * OccConeRayAxes[7].z + u * OccConeRayAxes[7].y + v * OccConeRayAxes[7].x,
                  k * OccConeRayAxes[8].z + u * OccConeRayAxes[8].y + v * OccConeRayAxes[8].x,
                  k * OccConeRayAxes[9].z + u * OccConeRayAxes[9].y + v * OccConeRayAxes[9].x };
  
  int step0 = OccConeIntegrationSamples[0] + OccConeIntegrationSamples[1];
  // For each section... do...
  int ith_step = 0;
  while(ith_step < OccConeIntegrationSamples[2])
  {
    // vec4 [ distance_to_next_integration | radius_cone | trapezoidalinterval | amplitude ]
    vec4 section_info = GetOcclusionSectionInfo(step0 + ith_step);
  
    float interval_distance = section_info.r;
    float mipmap_level      = section_info.g;
    float d_integral        = section_info.b;
    float gaussian_amp      = section_info.a;
  
    bool oc_term = true;
    // update occlusion cone
    for(int i = 0; i < 7; i++)
    {
      vec3 pos = pos_from_zero + vk[i] * track_distance;
      
      float Tau_s = GetGaussianExtinction(pos, mipmap_level);
   
      float amptau = gaussian_amp * Tau_s;

#ifdef USE_FALLOFF_FUNCTION
      occ_rays[i] += (last_amptau[i] + amptau) * d_integral * falloffunction(track_distance);
#else
      occ_rays[i] += (last_amptau[i] + amptau) * d_integral * OccUIWeight;
#endif
      last_amptau[i] = amptau;
    }
    
#ifdef USE_EARLY_TERMINATION
    // if the occlusion cone reaches a certain amount of remaining light, return
    if (occ_rays[0] > max_ext && occ_rays[1] > max_ext && occ_rays[2] > max_ext 
      && occ_rays[3] > max_ext && occ_rays[4] > max_ext && occ_rays[5] > max_ext && occ_rays[6] > max_ext)
      return (exp(-occ_rays[0]) + (exp(-occ_rays[1]) + exp(-occ_rays[2]) + exp(-occ_rays[3]) + 
              exp(-occ_rays[4]) +  exp(-occ_rays[5]) + exp(-occ_rays[6])) * OccRay7AdjWeight) / (1.0 + OccRay7AdjWeight * 6.0);
#endif

    // update tracked distance
    track_distance += section_info.r;
  
    // Next section
    ith_step = ith_step + 1;
  }
  
  return (exp(-occ_rays[0]) + (exp(-occ_rays[1]) + exp(-occ_rays[2]) + exp(-occ_rays[3]) +
          exp(-occ_rays[4]) +  exp(-occ_rays[5]) + exp(-occ_rays[6])) * OccRay7AdjWeight) / (1.0 + OccRay7AdjWeight * 6.0);
}

float Cone3RayOcclusion (vec3 pos_from_zero, float track_distance, vec3 k, vec3 u, vec3 v)
{
  // transform 1 to 3
  occ_rays[2] = occ_rays[0];
  occ_rays[1] = occ_rays[0];
  occ_rays[0] = occ_rays[0];

  last_amptau[2] = last_amptau[0];
  last_amptau[1] = last_amptau[0];
  last_amptau[0] = last_amptau[0];

  vec3 vk[3] =  { k * OccConeRayAxes[0].z + u * OccConeRayAxes[0].y + v * OccConeRayAxes[0].x,
                  k * OccConeRayAxes[1].z + u * OccConeRayAxes[1].y + v * OccConeRayAxes[1].x,
                  k * OccConeRayAxes[2].z + u * OccConeRayAxes[2].y + v * OccConeRayAxes[2].x };
  
  int step0 = OccConeIntegrationSamples[0];
  // For each section... do...
  int ith_step = 0;
  while(ith_step < OccConeIntegrationSamples[1])
  {
    // vec4 [ distance_to_next_integration | radius_cone | interval | amplitude ]
    vec4 section_info = GetOcclusionSectionInfo(step0 + ith_step);
  
    float interval_distance = section_info.r;
    float mipmap_level      = section_info.g;
    float d_integral        = section_info.b;
    float gaussian_amp      = section_info.a;
  
    // update occlusion cone
    for(int i = 0; i < 3; i++)
    {
      vec3 pos = pos_from_zero + vk[i] * track_distance;
      
      float Tau_s = GetGaussianExtinction(pos, mipmap_level);
   
      float amptau = Tau_s * gaussian_amp;

#ifdef USE_FALLOFF_FUNCTION
      occ_rays[i] += (last_amptau[i] + amptau) * d_integral * falloffunction(track_distance);
#else
      occ_rays[i] += (last_amptau[i] + amptau) * d_integral * OccUIWeight;
#endif

      last_amptau[i] = amptau;
    }

#ifdef USE_EARLY_TERMINATION
    // if the occlusion cone reaches a certain amount of remaining light, return
    if (occ_rays[0] > max_ext && occ_rays[1] > max_ext && occ_rays[2] > max_ext)
      return (exp(-occ_rays[0]) + exp(-occ_rays[1]) + exp(-occ_rays[2])) / 3.0;
#endif

    // update tracked distance
    track_distance += section_info.r;
  
    // Next section
    ith_step = ith_step + 1;
  }
  
#ifdef ALWAYS_SPLIT_CONES
  return Cone7RayOcclusion(pos_from_zero, track_distance, k, u, v);
#else
  // If we have more integration steps to resolve, then...
  if (OccConeIntegrationSamples[2] > 0)
    return Cone7RayOcclusion(pos_from_zero, track_distance, k, u, v);
#endif

  return (exp(-occ_rays[0]) + exp(-occ_rays[1]) + exp(-occ_rays[2])) / 3.0;
}

// Evaluating sections that are approximated with only one sample
float Cone1RayOcclusion (vec3 pos_from_zero, vec3 k, vec3 u, vec3 v)
{
  float track_distance = OccInitialStep;
  occ_rays[0] = 0.0;
  last_amptau[0] = 0.0;

  // For each section... do...
  int ith_step = 0;
  while(ith_step < OccConeIntegrationSamples[0])
  {
    // vec4 [ distance_to_next_integration | radius_cone | coef_rescale ]
    vec4 section_info = GetOcclusionSectionInfo(ith_step);

    float interval_distance = section_info.r;
    float mipmap_level      = section_info.g;
    float d_integral        = section_info.b;
    float gaussian_amp      = section_info.a;
  
    vec3 pos = pos_from_zero + k * track_distance;

    float Tau_s = GetGaussianExtinction(pos, mipmap_level);

    float amptau = Tau_s * gaussian_amp;

#ifdef USE_FALLOFF_FUNCTION
    occ_rays[0] += (last_amptau[0] + amptau) * d_integral * falloffunction(track_distance);
#else
    occ_rays[0] += (last_amptau[0] + amptau) * d_integral * OccUIWeight;
#endif

    last_amptau[0] = amptau;

#ifdef USE_EARLY_TERMINATION
    // if the occlusion cone reaches a certain amount of remaining light, return
    if (occ_rays[0] > max_ext) return exp(-occ_rays[0]);
#endif

    // update tracked distance
    track_distance += section_info.r;
  
    // Next section
    ith_step = ith_step + 1;
  }
   
#ifdef ALWAYS_SPLIT_CONES
  return Cone3RayOcclusion(pos_from_zero, track_distance, k, u, v);
#else
  // If we have more integration steps to resolve, then...
  if (OccConeIntegrationSamples[1] + OccConeIntegrationSamples[2] > 0)
    return Cone3RayOcclusion(pos_from_zero, track_distance, k, u, v);
#endif

  // Return the how much non shadowed is the sample color
  return exp(-occ_rays[0]);
}

float OcclusionEvaluationKernel (vec3 eye_ray_dir, vec3 pos_from_zero, vec3 gbl_up, vec3 gbl_right, vec3 realpos)
{
  vec3 cone_vec = normalize(WorldEyePos - realpos);

  vec3 u = gbl_up;
  vec3 v = gbl_right;
  vec3 k = cone_vec;

  return Cone1RayOcclusion(pos_from_zero, k, u, v);
}

///////////////////////////////////////////////////////////
// Shadow
float sdw_rays[7];
float last_samptau[7];

vec4 GetShadowSectionInfo (int id)
{
  return texelFetch(TexSdwConeSectionsInfo, id, 0).rgba;
}

float Cone7RayShadow (vec3 pos_from_zero, float track_distance, vec3 k, vec3 u, vec3 v)
{
  // transform 3 to 7
  sdw_rays[6] = sdw_rays[5] = sdw_rays[2];
  sdw_rays[4] = sdw_rays[3] = sdw_rays[1];
  float avg = (sdw_rays[2] + sdw_rays[1] + sdw_rays[0]) / 3.0;
  sdw_rays[2] = sdw_rays[1] = sdw_rays[0];
  sdw_rays[0] = avg;

  last_samptau[6] = last_samptau[5] = last_samptau[2];
  last_samptau[4] = last_samptau[3] = last_samptau[1];
  float avgt = (last_samptau[2] + last_samptau[1] + last_samptau[0]) / 3.0;
  last_samptau[2] = last_samptau[1] = last_samptau[0];
  last_samptau[0] = avgt;

  vec3 vk[7] =  { k * SdwConeRayAxes[3].z + u * SdwConeRayAxes[3].y + v * SdwConeRayAxes[3].x,
                  k * SdwConeRayAxes[4].z + u * SdwConeRayAxes[4].y + v * SdwConeRayAxes[4].x,
                  k * SdwConeRayAxes[5].z + u * SdwConeRayAxes[5].y + v * SdwConeRayAxes[5].x,
                  k * SdwConeRayAxes[6].z + u * SdwConeRayAxes[6].y + v * SdwConeRayAxes[6].x,
                  k * SdwConeRayAxes[7].z + u * SdwConeRayAxes[7].y + v * SdwConeRayAxes[7].x,
                  k * SdwConeRayAxes[8].z + u * SdwConeRayAxes[8].y + v * SdwConeRayAxes[8].x,
                  k * SdwConeRayAxes[9].z + u * SdwConeRayAxes[9].y + v * SdwConeRayAxes[9].x };

  int step0 = SdwConeIntegrationSamples[0] + SdwConeIntegrationSamples[1];
  // For each section... do...
  int ith_step = 0;
  while(ith_step < SdwConeIntegrationSamples[2])
  {
    // vec4 [ distance_to_next_integration | radius_cone | trapezoidalinterval | amplitude ]
    vec4 section_info = GetShadowSectionInfo(step0 + ith_step);
  
    float interval_distance = section_info.r;
    float mipmap_level      = section_info.g;
    float coef_rescale      = section_info.b;
    float gaussian_amp      = section_info.a;
  
    // update occlusion cone
    for(int i = 0; i < 7; i++)
    {
      vec3 pos = pos_from_zero + vk[i] * track_distance;
      
      float Tau_s = GetGaussianExtinction(pos, mipmap_level);
   
      float amptau = Tau_s * gaussian_amp;

      sdw_rays[i] += (last_samptau[i] + amptau) * coef_rescale * SdwUIWeight;
      last_samptau[i] = amptau;
    }

#ifdef USE_EARLY_TERMINATION
    // if the occlusion cone reaches a certain amount of remaining light, return
    if (sdw_rays[0] > max_ext && sdw_rays[1] > max_ext && sdw_rays[2] > max_ext 
      && sdw_rays[3] > max_ext && sdw_rays[4] > max_ext && sdw_rays[5] > max_ext && sdw_rays[6] > max_ext)
      return (exp(-sdw_rays[0]) + (exp(-sdw_rays[1]) + exp(-sdw_rays[2]) + exp(-sdw_rays[3]) + 
              exp(-sdw_rays[4]) +  exp(-sdw_rays[5]) + exp(-sdw_rays[6])) * SdwRay7AdjWeight)
              / (1.0 + SdwRay7AdjWeight * 6.0);
#endif

    // update tracked distance
    track_distance += section_info.r;
  
    // Next section
    ith_step = ith_step + 1;
  }

  return (exp(-sdw_rays[0]) + (exp(-sdw_rays[1]) + exp(-sdw_rays[2]) + exp(-sdw_rays[3]) + 
          exp(-sdw_rays[4]) +  exp(-sdw_rays[5]) + exp(-sdw_rays[6])) * SdwRay7AdjWeight)
          / (1.0 + SdwRay7AdjWeight * 6.0);
}

float Cone3RayShadow (vec3 pos_from_zero, float track_distance, vec3 k, vec3 u, vec3 v)
{
  // transform 1 to 3
  sdw_rays[2] = sdw_rays[0];
  sdw_rays[1] = sdw_rays[0];
  sdw_rays[0] = sdw_rays[0];

  last_samptau[2] = last_samptau[0];
  last_samptau[1] = last_samptau[0];
  last_samptau[0] = last_samptau[0];

  vec3 vk[3] =  { k * SdwConeRayAxes[0].z + u * SdwConeRayAxes[0].y + v * SdwConeRayAxes[0].x,
                  k * SdwConeRayAxes[1].z + u * SdwConeRayAxes[1].y + v * SdwConeRayAxes[1].x,
                  k * SdwConeRayAxes[2].z + u * SdwConeRayAxes[2].y + v * SdwConeRayAxes[2].x };

  int step0 = SdwConeIntegrationSamples[0];
  // For each section... do...
  int ith_step = 0;
  while(ith_step < SdwConeIntegrationSamples[1])
  {
     // vec4 [ distance_to_next_integration | radius_cone | interval | amplitude ]
    vec4 section_info = GetShadowSectionInfo(step0 + ith_step);

    float interval_distance = section_info.r;
    float mipmap_level      = section_info.g;
    float coef_rescale      = section_info.b;
    float gaussian_amp      = section_info.a;

    // update occlusion cone
    for(int i = 0; i < 3; i++)
    {
      vec3 pos = pos_from_zero + vk[i] * track_distance;
      
      float Tau_s = GetGaussianExtinction(pos, mipmap_level);
   
      float amptau = Tau_s * gaussian_amp;

      sdw_rays[i] += (last_samptau[i] + amptau) * coef_rescale * SdwUIWeight;
      last_samptau[i] = amptau;
    }

#ifdef USE_EARLY_TERMINATION
    // if the occlusion cone reaches a certain amount of remaining light, return
    if (sdw_rays[0] > max_ext && sdw_rays[1] > max_ext && sdw_rays[2] > max_ext)
      return (exp(-sdw_rays[0]) + exp(-sdw_rays[1]) + exp(-sdw_rays[2])) / 3.0;
#endif

    // update tracked distance
    track_distance += section_info.r;
  
    // Next section
    ith_step = ith_step + 1;
  }

  // If we have more integration steps to resolve, then...
#ifdef ALWAYS_SPLIT_CONES
  return Cone7RayShadow(pos_from_zero, track_distance, k, u, v);
#else
  if (SdwConeIntegrationSamples[2] > 0)
    return Cone7RayShadow(pos_from_zero, track_distance, k, u, v);
#endif

  return (exp(-sdw_rays[0]) + exp(-sdw_rays[1]) + exp(-sdw_rays[2])) / 3.0;
}

// Evaluating sections that are approximated with only one sample
float Cone1RayShadow (vec3 pos_from_zero, vec3 k, vec3 v, vec3 u)
{ 
  float track_distance = SdwInitialStep;
  sdw_rays[0] = 0.0;
  last_samptau[0] = 0.0;

  // For each section... do...
  int ith_step = 0;
  while(ith_step < SdwConeIntegrationSamples[0])
  {
    // vec4 [ number_of_points | sec_half_step | radius_cone | coef_rescale ]
    vec4 section_info = GetShadowSectionInfo(ith_step);
  
    float interval_distance = section_info.r;
    float mipmap_level      = section_info.g;
    float coef_rescale      = section_info.b;
    float gaussian_amp      = section_info.a;
  
    vec3 pos = pos_from_zero + k * track_distance;

    float Tau_s = GetGaussianExtinction(pos, mipmap_level);

    float amptau = Tau_s * gaussian_amp;

    // update occlusion cone
    sdw_rays[0] += (last_samptau[0] + amptau) * coef_rescale * SdwUIWeight;
    last_samptau[0] = amptau;

#ifdef USE_EARLY_TERMINATION
    // if the occlusion cone reaches a certain amount of remaining light, return
    if (sdw_rays[0] > max_ext) return exp(-sdw_rays[0]);
#endif

    // update tracked distance
    track_distance += section_info.r;
  
    // Next section
    ith_step = ith_step + 1;
  }
  
  // If we have more integration steps to resolve, then...
#ifdef ALWAYS_SPLIT_CONES
  return Cone3RayShadow(pos_from_zero, track_distance, k, u, v);
#else
  if (SdwConeIntegrationSamples[1] + SdwConeIntegrationSamples[2] > 0)
    return Cone3RayShadow(pos_from_zero, track_distance, k, u, v);
#endif

  // Return the how much non shadowed is the sample color
  return exp(-sdw_rays[0]);
}

float ShadowEvaluationKernel (vec3 pos_from_zero)
{
  vec3 k, u, v;
  // Point light source shadows
  if (TypeOfShadow == 0)
  {
    vec3 cone_vec = normalize(WorldLightingPos - (pos_from_zero - (VolumeScaledSizes / 2.0)));
    k = cone_vec;
    u = normalize(cross(k, LightCamRight));
    v = normalize(cross(k, u));
  }
  // Spot light source shadows
  else if (TypeOfShadow == 1)
  {
    vec3 cone_vec = normalize(WorldLightingPos - (pos_from_zero - (VolumeScaledSizes / 2.0)));
    k = cone_vec;
    u = normalize(cross(k, LightCamRight));
    v = normalize(cross(k, u));
    if (dot(cone_vec, LightCamForward) < SpotLightMaxAngle) return 0.0;
  }
  // Directional light source shadows
  else if (TypeOfShadow == 2)
  {
    k = LightCamForward;
    v = LightCamUp;
    u = LightCamRight;
  }
  
  return Cone1RayShadow(pos_from_zero, k, u, v);
}

///////////////////////////////////////////////////////////
struct Ray {
  vec3 Origin;
  vec3 Dir;
};

// Intersect ray with a box
// http://www.siggraph.org/education/materials/HyperGraph/raytrace/rtinter3.htm
bool IntersectBox (Ray r, vec3 boxmin, vec3 boxmax, out float tnear, out float tfar)
{
  vec3 invR = vec3(1.0f) / r.Dir;
  
  vec3 tbbmin = invR * (boxmin - r.Origin);
  vec3 tbbmax = invR * (boxmax - r.Origin);
   
  vec3 tmin = min(tbbmin, tbbmax);
  vec3 tmax = max(tbbmin, tbbmax);
  
  tnear = max(max(tmin.x, tmin.y), tmin.z);
  tfar  = min(min(tmax.x, tmax.y), tmax.z);

  return tfar > tnear;
}

bool RayAABBIntersection (vec3 vert_eye, vec3 vert_dir, out Ray r, out float rtnear, out float rtfar)
{
  vec3 aabbmin = -VolumeScaledSizes * 0.5f;
  vec3 aabbmax =  VolumeScaledSizes * 0.5f;

  r.Origin = vert_eye;
  r.Dir = normalize(vert_dir);
  
  float tnear, tfar;
  bool hit = IntersectBox(r, aabbmin, aabbmax, tnear, tfar);

  tnear = max(tnear, 0.0f);

  rtnear = tnear;
  rtfar  = tfar;

  return hit;
}

vec4 ShadeSample (vec4 clr, vec3 tx_pos, vec3 v_dir, vec3 v_up, vec3 v_right)
{
  vec4 L = clr;
  float ka = 0.0, kd = 0.0, ks = 0.0;

  // Directional Ambient Occlusion
  float IOcclusion = 0.0;
  if (ApplyOcclusion == 1)
  {
    ka = Kambient;
    IOcclusion = OcclusionEvaluationKernel(v_dir, tx_pos, v_up, v_right, tx_pos - (VolumeScaledSizes * 0.5));
  }
  
  // Shadows
  float IShadow = 0.0;
  if (ApplyShadow == 1)
  {
    kd = Kdiffuse;
    ks = Kspecular;
    IShadow = ShadowEvaluationKernel(tx_pos);
  }
  
  
  if (ApplyPhongShading == 1)
  {
    vec3 Wpos = tx_pos - (VolumeScaledSizes * 0.5);
    vec3 gradient_normal = texture(TexVolumeGradient, tx_pos / VolumeScaledSizes).xyz;
        
    if (gradient_normal != vec3(0, 0, 0))
    {
      gradient_normal      = normalize(gradient_normal);
     
      vec3 light_direction = normalize(WorldLightingPos - Wpos);
      vec3 eye_direction   = normalize(CameraEye - Wpos);
      vec3 halfway_vector  = normalize(eye_direction + light_direction);
    
      float dot_diff = max(0, dot(gradient_normal, light_direction));
      float dot_spec = max(0, dot(halfway_vector, gradient_normal));

      L.rgb = L.rgb * ((1.0 / (ka + kd)) *  (IOcclusion * ka + IShadow * kd * dot_diff)) 
            + Ispecular * (IShadow * ks * pow(dot_spec, Nshininess));
    }
  }
  else
  {
    L.rgb = (1.0 / (ka + kd)) * (L.rgb * IOcclusion * ka + L.rgb * IShadow * kd);
  }

  return L;
}

void main ()
{
  ivec2 storePos = ivec2(gl_GlobalInvocationID.xy);
  
  ivec2 size = imageSize(OutputFrag);
  if (storePos.x < size.x && storePos.y < size.y)
  {
    // SIBGRAPI 2019
    //vec2 fpos = vec2(storePos);
    // CORRECTION
    vec2 fpos = vec2(storePos) + 0.5;

    // Transform from [0, 1] to [-1, 1]
    vec3 VerPos = (vec3(fpos.x / float(size.x), fpos.y / float(size.y), 0.0) * 2.0) - 1.0;
    // Camera direction
    vec3 camera_dir = vec3(VerPos.x * fov_y_tangent * aspect_ratio, VerPos.y * fov_y_tangent, -1.0) * mat3(ViewMatrix);
    camera_dir = normalize(camera_dir);

    Ray r; float tnear, tfar;
    bool inbox = RayAABBIntersection(CameraEye, camera_dir, r, tnear, tfar);
  
    if(inbox)
    {
      // Check orthogonal vectors
      vec3 v_up, v_right;
      v_right = normalize(cross(camera_dir, vec3(0, 1, 0)));
      v_up = normalize(cross(-camera_dir, v_right));
      
      // Distance to be evaluated
      float D = abs(tfar - tnear);

      // Initialize Transparency and Radiance color
      vec4 dst = vec4(0.0);

      // World position at tnear, translating the volume to [0, VolumeAABB]
      vec3 wd_pos = r.Origin + r.Dir * tnear;
      wd_pos = wd_pos + (VolumeScaledSizes * 0.5);
      vec3 InvVolumeScaledSizes = 1.0f / VolumeScaledSizes;

      // Evaluate from 0 to D...
      for (float s = 0.0f; s < D;)
      {
        // Get the current step or the remaining interval
        float h = min(StepSize, D - s);
      
        // Texture position at tnear + (s + h/2)
        vec3 tx_pos = wd_pos + r.Dir * (s + h * 0.5);

        // Get normalized density from volume
        float density = texture(TexVolume, tx_pos * InvVolumeScaledSizes).r;
        
        // Get color from transfer function given the normalized density
        vec4 src = texture(TexTransferFunc, density);
      
        // Shade sample
        if (src.a > 0.0)
        {
          src = ShadeSample(src, tx_pos, r.Dir, v_up, v_right);
          
          // Evaluate the current opacity
          src.a = 1.0 - exp(-src.a * h);
          
          // Front-to-back composition
          src.rgb = src.rgb * src.a;
          dst = dst + (1.0 - dst.a) * src;
          
          // early termination
          if (dst.a > 0.99) break;
        }
        
        // Go to the next interval
        s = s + h;
      }
      imageStore(OutputFrag, storePos, dst);
    }
  }
}